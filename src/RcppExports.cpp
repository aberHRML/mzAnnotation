// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mfGen
std::vector<std::vector<std::string> > mfGen(double measured_mass, std::vector<int> max, std::vector<int> min, double tolerance, double charge, bool applygr);
RcppExport SEXP mzAnnotation_mfGen(SEXP measured_massSEXP, SEXP maxSEXP, SEXP minSEXP, SEXP toleranceSEXP, SEXP chargeSEXP, SEXP applygrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type measured_mass(measured_massSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type max(maxSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type charge(chargeSEXP);
    Rcpp::traits::input_parameter< bool >::type applygr(applygrSEXP);
    rcpp_result_gen = Rcpp::wrap(mfGen(measured_mass, max, min, tolerance, charge, applygr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"mzAnnotation_mfGen", (DL_FUNC) &mzAnnotation_mfGen, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_mzAnnotation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
